{"version":3,"sources":["components/Navbar/Navbar.js","components/Search/Search.js","components/Table/Table.js","components/Homepage/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","class","className","Search","props","htmlFor","handleInputChange","name","type","placeholder","id","onClick","handleFormSubmit","Table","scope","sort","results","map","employee","console","log","key","phone","alt","src","picture","thumbnail","first","last","email","dob","date","HomePage","state","search","event","target","value","setState","filtered","filter","toLowerCase","includes","handleSort","sortedResults","a","b","lst","preventDefault","searchFunc","axios","get","then","res","data","this","handleSubmitBtn","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qWAaeA,MAVX,WACI,OACI,6BACI,yBAAKC,MAAO,8BACZ,wBAAIC,UAAY,MAAhB,yB,MCmBDC,MAxBf,SAAgBC,GACZ,OACE,8BACE,yBAAKF,UAAU,cACb,2BAAOG,QAAQ,UAAf,WACA,uCACEC,kBAAmBF,EAAME,kBAEzBC,KAAK,SACLC,KAAK,OACLN,UAAU,eACVO,YAAY,OACZC,GAAG,UAPL,YASc,eAEd,4BAAQC,QAASP,EAAMQ,iBAAkBV,UAAU,qBAAnD,a,MCmBKW,MAnCf,SAAeT,GACb,OAEI,2BAAOF,UAAU,uBACjB,+BACE,4BACE,wBAAIY,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,OACA,4BAAQZ,UAAU,eAAeS,QAAa,kBAAMP,EAAMW,SAA1D,UACA,wBAAID,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SAGJ,+BACGV,EAAMY,QAAQC,KAAI,SAAAC,GAEjB,OADAC,QAAQC,IAAIF,GAEV,wBAAIG,IAAKH,EAASI,OAChB,4BAAI,yBAAKC,IAAI,WAAWC,IAAKN,EAASO,QAAQC,aAC9C,4BAAKR,EAASX,KAAKoB,MAAQ,IAAMT,EAASX,KAAKqB,MAC/C,4BAAKV,EAASI,OACd,4BAAKJ,EAASW,OACd,4BAAKX,EAASY,IAAIC,a,iBCqCjBC,E,4MArDbC,MAAQ,CACNjB,QAAS,GACTkB,OAAQ,I,EASZ5B,kBAAoB,SAAA6B,GAClB,IAAM5B,EAAO4B,EAAMC,OAAO7B,KACpB8B,EAAQF,EAAMC,OAAOC,MACzB,EAAKC,SAAL,eACG/B,EAAQ8B,IAEX,IAAME,EAAW,EAAKN,MAAMjB,QAAQwB,QAAO,SAAAtB,GAAQ,OACjDA,EAASX,KAAKoB,MAAMc,cAAcC,SAAS,EAAKT,MAAMC,OAAOO,kBAC7D,EAAKH,SAAS,CAACtB,QAAQuB,K,EAE7BI,WAAa,SAAAR,GACX,IAAMS,EAAgB,EAAKX,MAAMjB,QAAQD,MAAK,SAAC8B,EAAEC,GAC/C,OAAOD,EAAEtC,KAAKqB,KAAOkB,EAAEvC,KAAKwC,IAAM,GAAK,KAExC,EAAKT,SAAS,CAACtB,QAAQ4B,K,EAK1BhC,iBAAmB,SAAAuB,GAGjB,OAFAA,EAAMa,iBACW,EAAKC,WAAW,EAAKhB,MAAMjB,U,kEA3BzB,IAAD,OAClBkC,IAAMC,IAAI,iDACTC,MAAK,SAACC,GAAD,OAAS,EAAKf,SAAS,CAACtB,QAAUqC,EAAIC,KAAKtC,e,+BA6B/C,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACAkB,OAAUqB,KAAKtB,MAAMjB,QACrBV,kBAAsBiD,KAAKjD,kBAC3BkD,gBAAmBD,KAAKC,kBAExB,kBAAC,EAAD,CACExC,QAAWuC,KAAKtB,MAAMjB,QACtBD,KAAQwC,KAAKZ,kB,GA/CAc,a,MCCRC,MAJf,WACE,OAAO,kBAAC,EAAD,OCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.141ea4f8.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Navbar.css\"\n\n    function Navbar() {\n        return (\n            <div>\n                <nav class =\"navbar navbar-dark bg-dark\">\n                <h1 className = \"h1\" >Employee Directory</h1>\n                </nav>\n            </div>\n        )\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./Search.css\"\nfunction Search(props) {\n    return (\n      <form>\n        <div className=\"form-group\">\n          <label htmlFor=\"search\">Search:</label>\n          <input\n            handleInputChange={props.handleInputChange}\n            //value={props.search}\n            name=\"search\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Name\"\n            id=\"search\"\n            // eslint-disable-next-line react/jsx-no-duplicate-props\n            className = \"inputClass\"\n          />\n          <button onClick={props.handleFormSubmit} className=\" btn-primary mt-3\">\n            Search\n          </button>\n        </div>\n      </form>\n    );\n  }\n\nexport default Search\n","import React from \"react\";\nimport \"./Table.css\"\nfunction Table(props) {\n  return (\n\n      <table className=\"table table-striped\">\n      <thead>\n        <tr>\n          <th scope=\"col\">Image</th>\n          <th scope=\"col\">Name\n          <button className=\"sortBtnStyle\" onClick =  { () => props.sort()}> Sort</button></th>\n          <th scope=\"col\">Phone</th>\n          <th scope=\"col\">Email</th>\n          <th scope=\"col\">DOB</th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.results.map(employee => {\n          console.log(employee);\n          return (\n            <tr key={employee.phone}>\n              <td><img alt=\"employee\" src={employee.picture.thumbnail}/></td>\n              <td>{employee.name.first + \" \" + employee.name.last}</td>\n              <td>{employee.phone}</td>\n              <td>{employee.email}</td>\n              <td>{employee.dob.date}</td> \n            </tr>\n          )\n        })}\n        \n      </tbody>\n    </table>\n  );\n}\n\n\n\nexport default Table;\n\n\n\n\n\n","import React, { Component } from \"react\";\n//import API from \"../../utils/API\";\nimport Navbar from \"../Navbar/Navbar\";\nimport Search from \"../Search/Search\";\nimport Table from \"../Table/Table\";\nimport axios from \"axios\";\n\n\nclass HomePage extends Component {\n  state = {\n    results: [],\n    search :\"\",\n  };\n// Its working when we call the API directly in componentDidMount\ncomponentDidMount() {\n  axios.get(\"https://randomuser.me/api/?results=200&nat=us\")\n  .then((res) => this.setState({results : res.data.results}))\n      //.then((res)=> console.log(res))\n  }\n\nhandleInputChange = event => {\n  const name = event.target.name;\n  const value = event.target.value;\n    this.setState({\n      [name] : value\n    })\n    const filtered = this.state.results.filter(employee => \n      employee.name.first.toLowerCase().includes(this.state.search.toLowerCase()));\n      this.setState({results:filtered});\n}\nhandleSort = event => {\n  const sortedResults = this.state.results.sort((a,b)=> {\n    return a.name.last > b.name.lst ? 1 : -1;\n  });\n   this.setState({results:sortedResults})\n}\n\n\n// When the form is submitted, search the Giphy API for `this.state.search`\nhandleFormSubmit = event => {\n  event.preventDefault();\n  const response = this.searchFunc(this.state.results);\n  return response;\n};\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <Search \n        search = {this.state.results}\n        handleInputChange  = {this.handleInputChange}\n        handleSubmitBtn = {this.handleSubmitBtn}\n        />\n        <Table\n          results = {this.state.results}\n          sort = {this.handleSort}\n        />\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n","import React from \"react\";\n//import {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport HomePage from \"./components/Homepage/HomePage\";\nimport './App.css';\n\nfunction App() {\n  return <HomePage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}